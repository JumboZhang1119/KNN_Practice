# -*- coding: utf-8 -*-
"""HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1voak8R00t8POeeiydk-nHf3qmYeZGRWk
"""

# import function
!pip install kaggle
from google.colab import files
import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Z-Score Normalization
from sklearn.preprocessing import StandardScaler

# Robust Normalization
from sklearn.preprocessing import RobustScaler

# Download data in Kaggle
uploaded = files.upload() # kaggle.json
!mkdir -p ~/.kaggle/
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json # Setting Permissions of the File (kaggle.json), only readable by the current user
!kaggle competitions download -c groupchallenge-knn-competition-pds
!unzip groupchallenge-knn-competition-pds.zip

# Data formatting

# For Train
df = pd.read_csv("train.csv", sep=',', dtype=str, skipinitialspace=True)
df = df.fillna(0)
train_array = df.values

# For Test
df = pd.read_csv("test.csv", sep=',', dtype=str, skipinitialspace=True)
df = df.fillna(0)
test_array = df.values

# Change Y, N to 1, 0 in columns 7, 8
train_array[:, 7] = np.where(train_array[:, 7] == "Y", 1, 0)
train_array[:, 8] = np.where(train_array[:, 8] == "Y", 1, 0)
test_array[:, 7] = np.where(test_array[:, 7] == "Y", 1, 0)
test_array[:, 8] = np.where(test_array[:, 8] == "Y", 1, 0)

# Segment IDX
train_array = train_array[1:, :]
test_array = test_array[1:, :]

# Remove mixed alphanumeric data (low-relevance)
delete_columns = [0, 1, 3, 4, 5, 6, 13, 17, 44] #[IDX, id, full_name, pdes, name, prefix, orbit_id, equinox, class]
train_array = np.delete(train_array, delete_columns, axis=1)
test_array = np.delete(test_array, delete_columns, axis=1)

# Creat feature correlation matrix
train_df = pd.DataFrame(train_array.astype("float"))
correlation_matrix = train_df.corr(numeric_only=True)
display(correlation_matrix.style.background_gradient(cmap='YlGnBu').set_properties(2))

# Segment labels and answers
train_data = train_array[:, :-1]
train_label = train_array[:, -1]
test_data = test_array[:, :-1]
test_label = test_array[:, -1]

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 8))
plt.imshow(correlation_matrix, cmap='YlGnBu', interpolation='nearest')
plt.colorbar()
plt.title('Feature Correlation Heatmap')
plt.xticks(range(len(correlation_matrix.columns)), correlation_matrix.columns, rotation=90)
plt.yticks(range(len(correlation_matrix.columns)), correlation_matrix.columns)
plt.tight_layout()
plt.savefig('correlation_heatmap.png')
files.download('correlation_heatmap.png')

# Select features with higher correlation
reserved_column = [1, 10, 12, 13, 18, 23, 24] #[neo, e, q, i, n, moid, moid_ld]
train_data = train_data[:, reserved_column]
test_data = test_data[:, reserved_column]

# Train & Predict (None)

accuracies = []
for k in range(1, 11):
  knn = KNeighborsClassifier(n_neighbors = k)
  knn.fit(train_data, train_label)
  test_pred_none = knn.predict(test_data)
  accuracy = accuracy_score(test_label, test_pred_none)
  accuracies.append(accuracy)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), accuracies, marker='o', linestyle='-', color='b')
plt.title('Accuracy vs. Number of Neighbors (k) (Classic KNN)')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.grid(True)
plt.xticks(range(1, 11))
plt.show()

print(accuracies)

# Train & Predict (StandardScaler)

scaler = StandardScaler()
scaled_train_data = scaler.fit_transform(train_data)
scaled_test_data = scaler.fit_transform(test_data)

accuracies_Standard = []
for k in range(1, 11):
  knn = KNeighborsClassifier(n_neighbors = k)
  knn.fit(scaled_train_data, train_label)
  test_pred_standard = knn.predict(scaled_test_data)
  accuracy = accuracy_score(test_label, test_pred_standard)
  accuracies_Standard.append(accuracy)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), accuracies_Standard, marker='o', linestyle='-', color='r')
plt.title('Accuracy vs. Number of Neighbors (k) (StandardScaler KNN)')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.grid(True)
plt.xticks(range(1, 11))
plt.show()

print("Accuracy: ", accuracies_Standard)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), accuracies_Standard, marker='o', linestyle='-', color='r')
plt.plot(range(1, 11), accuracies, marker='o', linestyle='-', color='b')
plt.title('Accuracy vs. Number of Neighbors (k) (StandardScaler KNN)')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.grid(True)
plt.xticks(range(1, 11))
plt.legend()
plt.show()

# Train & Predict (RobustScaler)

scaler = RobustScaler()
scaled_train_data = scaler.fit_transform(train_data)
scaled_test_data = scaler.fit_transform(test_data)

accuracies_Robust = []
for k in range(1, 11):
  knn = KNeighborsClassifier(n_neighbors = k)
  knn.fit(scaled_train_data, train_label)
  test_pred_Robust = knn.predict(scaled_test_data)
  accuracy = accuracy_score(test_label, test_pred_Robust)
  accuracies_Robust.append(accuracy)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), accuracies_Robust, marker='o', linestyle='-', color='g')
plt.title('Accuracy vs. Number of Neighbors (k) (RobustScaler KNN)')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.grid(True)
plt.xticks(range(1, 11))
plt.show()

print("Accuracy: ", accuracies_Robust)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), accuracies_Robust, marker='o', linestyle='-', color='g')
plt.plot(range(1, 11), accuracies_Standard, marker='o', linestyle='-', color='r')
plt.title('Accuracy vs. Number of Neighbors (k) (RobustScaler KNN)')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.grid(True)
plt.xticks(range(1, 11))
plt.legend
plt.show()

# Train & Predict (RobustScaler + Weight)

scaler = RobustScaler()
scaled_train_data = scaler.fit_transform(train_data)
scaled_test_data = scaler.fit_transform(test_data)

accuracies_Robust_weight = []
for k in range(1, 11):
  knn = KNeighborsClassifier(n_neighbors = k, weights='distance')
  knn.fit(scaled_train_data, train_label)
  test_pred_Robust_weight = knn.predict(scaled_test_data)
  accuracy = accuracy_score(test_label, test_pred_Robust_weight)
  accuracies_Robust_weight.append(accuracy)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), accuracies_Robust, marker='o', linestyle='-', color='g')
plt.plot(range(1, 11), accuracies_Robust_weight, marker='s', linestyle='--', color='g')
plt.title('Accuracy vs. Number of Neighbors (k) (RobustScaler KNN)')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.grid(True)
plt.xticks(range(1, 11))
plt.legend()
plt.show()

print("Accuracy: ", accuracies_Robust_weight)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), accuracies_Robust_weight, marker='s', linestyle='--', color='g')
plt.title('Accuracy vs. Number of Neighbors (k) (RobustScaler KNN)')
plt.xlabel('Number of Neighbors (k)')
plt.ylabel('Accuracy')
plt.grid(True)
plt.xticks(range(1, 11))
plt.show()

# Save as .csv file

pred = test_pred_Robust_weight
idx_values = np.arange(len(pred))
result = np.column_stack((idx_values, pred))
result = pd.DataFrame(result, columns=['IDX', 'Target'])
result.to_csv('test_pred_Robust_weight.csv', index=False)
files.download('test_pred_Robust_weight.csv')